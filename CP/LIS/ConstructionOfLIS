// C++ implementation to find longest increasing subsequence
// in O(n Log n) time.
// approach:1
#include <bits/stdc++.h>
using namespace std;

// Binary search
int GetCeilIndex(int arr[], vector<int>& T, int l, int r,
				int key)
{
	while (r - l > 1) {
		int m = l + (r - l) / 2;
		if (arr[T[m]] >= key)
			r = m;
		else
			l = m;
	}

	return r;
}

int LongestIncreasingSubsequence(int arr[], int n)
{
	// Add boundary case, when array n is zero
	// Depend on smart pointers

	vector<int> tailIndices(n, 0); // Initialized with 0
	vector<int> prevIndices(n, -1); // initialized with -1

	int len = 1; // it will always point to empty location
	for (int i = 1; i < n; i++) {
		if (arr[i] < arr[tailIndices[0]]) {
			// new smallest value
			tailIndices[0] = i;
		}
		else if (arr[i] > arr[tailIndices[len - 1]]) {
			// arr[i] wants to extend largest subsequence
			prevIndices[i] = tailIndices[len - 1];
			tailIndices[len++] = i;
		}
		else {
			// arr[i] wants to be a potential condidate of
			// future subsequence
			// It will replace ceil value in tailIndices
			int pos = GetCeilIndex(arr, tailIndices, -1,
								len - 1, arr[i]);

			prevIndices[i] = tailIndices[pos - 1];
			tailIndices[pos] = i;
		}
	}

	cout << "LIS of given input" << endl;
	for (int i = tailIndices[len - 1]; i >= 0; i = prevIndices[i])
		cout << arr[i] << " ";
	cout << endl;

	return len;
}

int main()
{
	int arr[] = { 2, 5, 3, 7, 11, 8, 10, 13, 6 };
	int n = sizeof(arr) / sizeof(arr[0]);

	printf("LIS size %d\n", LongestIncreasingSubsequence(arr, n));

	return 0;
}

/**
// approach:2
vector<int> pathOfLIS(vector<int>& nums)
{
    int n = nums.size();
    vector<int> sub, subIndex;
    vector<int> path(n, -1);
    for (int i = 0; i < n; ++i)
    {
        if (sub.empty() || sub[sub.size() - 1] < nums[i])
        {
            path[i] = sub.empty() ? -1 : subIndex[sub.size() - 1];
            sub.push_back(nums[i]);
            subIndex.push_back(i);
        }
        else
        {
            int idx = lower_bound(sub.begin(), sub.end(), nums[i]) - sub.begin();
            path[i] = idx == 0 ? -1 : subIndex[idx - 1];
            sub[idx] = nums[i];
            subIndex[idx] = i;
        }
    }

    vector<int> ans;
    int t = subIndex[subIndex.size() - 1];
    while (t != -1)
    {
        ans.push_back(nums[t]);
        t = path[t];
    }

    reverse(ans.begin(), ans.end());
    return ans;
}

int main()
{
    vector<int> arr = {10, 22, 9, 33, 21, 50, 41, 60, 80};
    vector<int> ans = pathOfLIS(arr);
    for(auto it : ans) cout << it << " ";
    return 0;
}
*/
